// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1593196456, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x1e\xb4\x85\x93\xb4\x91\xbc\x6b" +
		"\xaf\xed\xb5\x00\xa3\x07\x5f\x6a\xa0\x68\x0f\x4e\x4e\x4d\xd1\xcc\x92\xa3\x15\x21\x8a\x14\x38\x23\xbb\xfb\xf7\x05" +
		"\x57\x4e\x6a\xc0\x40\x74\x9a\xa1\xe6\xcd\xbc\x79\x8f\xac\xeb\xda\x44\x1a\xb9\x85\xef\xed\xd4\x37\xc3\xd0\xb8\xc1" +
		"\x88\xd7\x6f\x27\xc6\xb1\xd8\xec\x27\xf5\x29\xb6\xa8\x1e\xa2\x72\x8e\x54\x32\x0a\xf8\x2d\xcd\xc2\xb8\x4f\x13\xc7" +
		"\x9e\x0e\x1c\x2b\xa3\xc7\x89\x5b\x4c\xd9\x3f\x91\xb2\x09\x14\x0f\x33\x1d\xb8\x05\xc7\xfa\xf3\xa3\xc9\xa4\x1c\xfc" +
		"\xe8\xb5\xc5\x66\x6d\x8c\xb0\xaa\x8f\x07\x69\x0d\x50\x23\xd0\x9e\x43\x8b\xfb\x94\x06\xcf\x06\x00\x16\x62\xf6\xff" +
		"\x83\xa5\xbb\xf2\xbf\x6a\xcc\xea\x77\x1f\x07\x81\xf6\xa4\xb0\x14\xb1\x67\xcc\xc2\xee\x23\x7c\x84\x25\x61\x3c\x33" +
		"\x7a\x7a\x62\x8c\x3e\xe7\x94\xa5\x31\xa1\x00\xca\xac\xd5\x67\x61\x68\xcf\x78\xee\x53\x60\xcc\x39\x60\xcf\x96\xca" +
		"\x2e\x99\x85\xf3\xd3\x69\xbf\xa6\xcb\x29\xaa\x63\x19\x64\xf6\xca\x8d\x4d\x23\x32\xeb\x9c\xa3\x60\xbb\xde\x9e\x38" +
		"\xf7\xaa\x93\xb4\xe7\xe7\x3f\x86\x9d\x0f\xc3\xeb\x8a\xf3\x47\x0e\x6c\xf5\x93\x1f\xf9\x55\xf8\xeb\x44\x07\x7e\x70" +
		"\x77\xee\xfa\xca\x6d\xe9\xd2\xd5\xcc\xb7\x54\x6f\x69\x67\xeb\x1d\x5d\xd8\x9a\x76\xd7\x7b\xbe\xb9\x26\xea\xc8\x9e" +
		"\xed\x67\xd5\x14\x1f\xdc\x5d\xb7\xbb\xd8\xf3\xcd\x66\x5d\x6f\x6e\xec\x55\xbd\xbd\xbd\xb4\xf5\xfe\x96\x36\x75\xd7" +
		"\xdd\xec\xec\xd6\xed\x6e\x2f\xb7\xfb\x33\x3b\x07\x9d\x33\xdf\x71\x3c\x9b\xfd\xfd\xf7\xc4\x98\xd5\x9f\x73\x86\x30" +
		"\x65\xdb\x43\x6c\xcf\x23\x9b\x25\x2b\x2a\x8d\xac\x7d\x72\x2d\x0e\xac\x06\xe8\x52\x08\xe9\x39\xb3\xf3\x99\xad\xb6" +
		"\xd0\x3c\x17\x4f\x06\x3e\xb6\x50\x3f\x96\x78\xf5\x47\x52\x44\xb6\x2c\x42\xf9\x08\xf1\xd1\x9e\x5c\x70\x29\xbe\xd3" +
		"\xc5\x0b\x8a\x47\xf8\x38\xcd\x2a\xd0\x74\xb2\x60\x99\xd7\xe0\x41\xdf\x09\x48\x64\x1e\xd9\xc1\x97\x44\x7c\x3c\x04" +
		"\x46\x91\xc5\x35\xa5\x7d\x89\xa4\xc5\xa6\xc4\x8f\x0b\xe9\xcc\x32\x07\x05\xc7\x79\xe4\x4c\x9a\xb2\x01\x72\x7a\x3e" +
		"\xb9\x0c\xc8\x49\xdc\x94\x5b\x54\xc1\x37\x85\x65\x65\x0a\xf8\x53\xcf\xe8\x3c\x07\x27\x48\x1d\x28\x82\xa3\x7a\x3d" +
		"\xbe\x97\xd7\x4d\x3f\x94\xa5\x4f\x45\x4b\xb3\x02\x5f\xa2\xd7\x8d\xe9\xe5\x84\x54\xb3\xdf\xcf\xe5\xd9\x38\x52\xaa" +
		"\x5f\x24\x29\xdf\x0a\x14\xc2\x22\x18\x56\x58\xae\x9e\x17\xa4\x18\x8e\xf0\x1d\xbe\x96\xd2\xaf\xf0\x52\x88\x50\xce" +
		"\x74\x5c\xc6\x36\x2f\xf0\xce\x07\xe5\x2c\xdf\x46\x97\x5b\xb7\xbc\x8b\xcc\xff\x64\x9e\x02\x59\xfe\xfe\x0b\xa0\x7c" +
		"\x90\x16\x7f\x55\xef\xbf\x7c\xf9\xa5\xf9\xf9\xc3\x4f\xd5\x47\x54\xd5\xdf\x6f\xb0\x8e\x94\x27\xca\xf2\x16\x5a\x5d" +
		"\xac\xd7\xd7\xeb\xcd\xfa\x62\x73\xb5\xde\x56\xe6\xbf\x00\x00\x00\xff\xff\x6e\xef\x61\x56\x20\x04\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        1056,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1593196452, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
