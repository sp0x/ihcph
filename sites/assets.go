// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592675072, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\x0c\xe4\xc2\x49\xda\x48\xd6\xae" +
		"\xe5\xfd\x10\x60\xf4\xe0\x4b\x17\x28\xda\x43\x92\x53\x53\x14\x23\x72\x24\x11\xa2\x48\x81\x33\xf4\x76\xff\x7d\xc1" +
		"\x55\xe2\x1a\x30\x10\x9d\x66\x86\x7c\x8f\x6f\xde\x8c\xca\xb2\x54\x1e\x67\x6a\xc1\x8e\x7a\x19\xab\x69\xaa\xcc\xa4" +
		"\xd8\xca\xf7\x8a\x32\xc4\x3a\xda\x45\x6c\xf0\x2d\x14\x27\x2f\x14\x3d\xe6\x0c\x1d\xfc\x16\x12\x13\x3c\x85\x85\xfc" +
		"\x88\x03\xf9\x42\xc9\x65\xa1\x16\x96\x68\x9f\x51\x48\x39\xf4\x43\xc2\x81\x5a\x20\x5f\x7e\xf9\xa4\x22\x0a\x39\x3b" +
		"\x5b\x69\x61\x53\x2b\xc5\x24\x62\xfd\xc0\xad\x02\x28\xc1\x61\x47\xae\x85\xa7\x10\x26\x4b\x0a\x00\x60\x15\xa6\xff" +
		"\x2f\xac\xec\x42\xff\x8a\x52\x37\xbf\x5b\x3f\x31\xc8\x88\x02\x1a\x3d\x74\x04\x89\xc9\x7c\x04\xeb\x41\x23\x13\x9c" +
		"\x09\x46\x7c\x26\x98\x6d\x8c\x21\x72\xa5\x5c\x06\xe4\xb7\x6e\xbe\x30\x81\x8c\x04\xe7\x31\x38\x82\x14\x1d\x74\xa4" +
		"\x31\xf7\x12\x89\x29\x3e\x5f\xfb\xab\xfa\x18\xbc\x18\xe2\x89\x93\x15\xaa\x74\x98\x21\x92\xa4\xe8\x19\x9a\xba\xb9" +
		"\x6a\x1e\x45\x16\x6e\xef\xee\x7e\x0c\xbb\x9b\xa6\xd7\x37\xee\x98\x1c\x69\xf9\x6c\x67\xfa\x75\xc1\x81\x4e\xe6\xd1" +
		"\xec\x1e\x4c\x83\xf7\xa6\x24\x3a\x62\xd9\xe0\x41\x97\x07\xdc\xea\x12\x0f\xbb\x8e\xf6\x3b\xc4\x1e\xf5\x6d\x97\x44" +
		"\x82\x3f\x99\xc7\xfe\xb0\xed\x68\xbf\xa9\xcb\xcd\x5e\x3f\x94\xcd\xf1\x5e\x97\xdd\x11\x37\x65\xdf\xef\x0f\xba\x31" +
		"\x87\xe3\x7d\xd3\xdd\xea\xe4\x24\x45\x7a\x24\x7f\x9b\xec\xd3\x4b\xa2\xd4\xcd\x9f\x29\x02\x13\x46\x3d\x02\xeb\x91" +
		"\x66\x52\x6b\x96\xad\x99\x49\xc6\x60\x5a\x18\x48\x14\x40\x1f\x9c\x0b\xe7\x48\xc6\x46\xd2\xd2\x82\xc4\x94\x07\x31" +
		"\xd1\xa5\x05\xb1\x73\x8e\x6f\xfe\x08\x02\x9e\x34\x31\x63\xbc\x00\x5b\xaf\xaf\xd6\x9b\xe0\xdf\xc9\x3a\x00\xf4\x17" +
		"\xb0\x7e\x49\xc2\x20\xe1\xea\xfb\xfa\x5e\x05\x27\x79\xc7\x80\xcc\x69\x26\x03\x36\x27\x6c\xfd\xe0\x08\xb2\x2d\xa6" +
		"\xca\xf4\x39\xe2\x16\x36\x39\xfe\xb4\x8a\x8e\xc4\xc9\x09\x90\x4f\x33\x45\x94\x10\x15\x40\x0c\xe7\xeb\x68\x01\x56" +
		"\x73\x43\x6c\xa1\x70\xb6\xca\x2a\x0b\x95\xc1\x9f\x47\x82\xde\x92\x33\x0c\xa1\x07\xf4\x40\x5e\xac\x5c\xde\xf3\x6b" +
		"\xd2\x0f\xb9\xe9\xeb\xa5\x95\x2c\xc3\xd7\xe8\x35\x31\x7e\xab\xa0\x48\xb4\x5d\xca\xff\x8a\x41\xc1\xf2\x9b\x25\xd7" +
		"\x23\xe7\x5e\xec\xca\x5f\x6f\x9d\x50\xe4\xef\x5c\x79\x77\xd6\xed\x8e\xf4\x4f\xa4\xc5\xa1\xa6\x97\x23\x00\x8c\x03" +
		"\xb7\xf0\x57\xf1\xfe\xeb\xd7\x5f\xaa\x9f\x3f\xfc\x54\x7c\x84\xa2\xf8\xfb\x0d\xd6\xa0\xd0\x82\x91\xdf\x42\x8b\x6d" +
		"\x5d\xef\xea\x4d\xbd\xdd\x3c\xd4\x4d\xa1\xfe\x0b\x00\x00\xff\xff\xb5\xe8\xf5\x85\xe6\x03\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        998,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592675050, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
