// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592401285, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xd1\x4e\x1b\x3d\x10\x85\xef\xfd\x14\xa3\x20\x21\x90\x7e\x6f\x08" +
		"\x04\x92\x58\x42\xff\x05\x37\x45\xaa\xd4\x0b\xe8\x03\xcc\xda\x67\xb3\xd6\x7a\xed\x95\x3d\x86\xf2\xf6\xd5\x66\xa1" +
		"\x8d\xd4\x3b\xcf\x9c\xf1\x37\x73\xc6\xd6\x5a\xab\xc8\x23\x0c\xf9\xde\x4e\x7d\x33\x0c\x8d\x1b\x54\xf1\xf2\x95\x51" +
		"\x0e\xc5\x66\x3f\x89\x4f\xd1\xd0\xea\x39\x0a\x72\xe4\x39\xe2\x40\xdf\x52\x2d\xa0\xa7\x34\x21\xf6\x7c\x44\x5c\x29" +
		"\xf9\x98\x60\x68\xca\xfe\x8d\x05\x2a\x70\x3c\x56\x3e\xc2\x10\xa2\xfe\xf9\xa2\x32\x0b\x82\x1f\xbd\x18\xda\xdc\x28" +
		"\x55\x20\xe2\xe3\xb1\x18\x45\xa4\x29\x70\x8b\x60\xe8\x29\xa5\xc1\x43\x11\x11\x2d\x83\xd9\xbf\x89\x85\x2e\xf8\x25" +
		"\x4a\x5d\x7c\xf7\x71\x28\x24\x3d\x0b\x59\x8e\xd4\x82\x6a\x81\xfb\x8f\x7c\x24\xcb\x05\xf4\x0e\xea\xf9\x0d\x34\xfa" +
		"\x9c\x53\x2e\x8d\x0a\xf3\x85\xa5\x57\x2f\x32\x15\xb3\x5e\x67\x14\xe4\xb7\x93\x9d\xa6\xcb\x29\x8a\x43\x19\x4a\xf5" +
		"\x82\xc6\xa6\x71\x3d\x0c\x4a\x5d\xfc\xa8\x99\x0a\x38\xdb\x9e\x8a\xed\x31\x42\x2d\xd1\x4c\x1a\x21\x7d\x72\x86\x8e" +
		"\x10\x45\x34\xb1\xf4\x86\xce\xa1\xeb\x82\x00\x2b\xaf\x7e\xc4\xff\x13\x1f\xf1\xec\x1e\xdd\xc3\xbd\xdb\xf2\x9d\xd3" +
		"\xc0\x81\xf5\x96\xf7\x56\xef\xf9\xd6\x6a\xde\x3f\xb4\xd8\x3d\x30\x77\x6c\x2f\xdb\x2a\x92\xe2\xb3\x7b\xec\xf6\xb7" +
		"\x2d\x76\x9b\x1b\xbd\xd9\xd9\x7b\xbd\x3d\xdc\x59\xdd\x1e\x78\xa3\xbb\x6e\xb7\xb7\x5b\xb7\x3f\xdc\x6d\xdb\x4b\x5b" +
		"\x83\xd4\x8c\x47\xc4\xcb\xea\x9f\xfe\x04\x8a\xa8\x4b\x21\xa4\xf7\x0c\xe7\x33\xac\x18\x92\x5c\xe7\x4d\x5e\xbc\x2c" +
		"\x7e\x32\x4a\x0d\x42\x88\x75\x44\x66\x49\x59\x11\xe5\xf4\x7e\x5a\x12\xd1\x32\x7b\xca\x86\x56\x8d\x63\x81\xe9\xb9" +
		"\x5c\x35\x1d\xe7\xeb\x95\x9a\x21\xaf\x3d\xa8\xf3\x08\xae\x50\xea\x88\x23\x21\x8a\x97\x8f\xab\x72\x0e\xbf\x9e\xa7" +
		"\x38\x15\x2d\x50\xf1\x12\xb0\x1c\xcf\x3b\x34\xa7\x3c\x35\xa7\xb7\x5d\xea\x46\x94\x7f\xeb\x82\x6f\x66\x85\xf8\x53" +
		"\x61\x91\xec\xdb\x3a\x7f\x57\xc7\xc2\x7a\x16\xbf\xa4\x10\x3e\x0d\xff\x0e\x00\x00\xff\xff\xf0\x35\x7e\x1a\xe5\x02" +
		"\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        741,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592399630, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
