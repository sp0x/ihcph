// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1595090913, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xdf\x6f\xdc\x36\x0c\x7e\xd7\x5f\x41\xf8\x86\xb4\xdd\x6a\xe7\x2e" +
		"\xb9\x24\x17\x03\xc1\x1e\xf2\xb2\x00\xc3\x06\x2c\xed\xd3\x3a\xac\xb4\x44\xdb\x82\x65\xc9\x20\xa9\x64\xf7\xdf\x0f" +
		"\x3a\xa7\x6d\x80\x02\xd5\x13\x49\xf1\xe3\x8f\xef\x93\xea\xba\x36\x11\x67\x6a\xc1\x8f\x76\x19\x9b\x69\x6a\xdc\x64" +
		"\xc4\xeb\x97\x88\x71\x24\x96\xfd\xa2\x3e\xc5\x16\xaa\x87\xa8\xc4\x11\x8b\x87\x01\x7e\x4b\x59\x08\xee\xd3\x42\x71" +
		"\xc4\x81\x62\x65\xf4\xb8\x50\x0b\x0b\xfb\x27\x54\x32\x01\xe3\x90\x71\xa0\x16\x28\xd6\x1f\x1f\x0d\xa3\x52\xf0\xb3" +
		"\xd7\x16\x76\x5b\x63\x84\x54\x7d\x1c\xa4\x35\x00\x35\x04\xec\x28\xb4\x70\x9f\xd2\xe4\xc9\x00\x00\xac\x83\xd9\x6f" +
		"\x81\xb5\xba\xd2\x7f\x6a\xcc\xe6\x77\x1f\x27\x01\x1d\x51\xc1\x62\x84\x8e\x20\x0b\xb9\xf7\xe0\x23\x58\x14\x82\x67" +
		"\x82\x11\x9f\x08\x66\xcf\x9c\x58\x1a\x13\x0a\xa0\xf4\xda\x7c\x14\x02\x1d\x09\x9e\xc7\x14\x08\x32\x07\xe8\xc8\x62" +
		"\xd9\x85\x49\x88\x9f\x4e\xfb\x35\x3d\xa7\xa8\x8e\x64\x92\xec\x95\x1a\x9b\x66\x60\xd2\xcc\x51\x60\xbf\xdd\x9f\x66" +
		"\x1e\x55\x17\x69\xcf\xcf\x7f\x0c\x3b\x9f\xa6\xd7\x19\xe7\x8f\x14\xc8\xea\x07\x3f\xd3\x8b\xf9\xd7\xb7\xcb\xfb\x94" +
		"\xa3\xfe\xba\xe0\x40\x0f\xee\xce\x5d\x5f\xb9\x3d\x5e\xba\x9a\xe8\x16\xeb\x3d\x1e\x6c\x7d\xc0\x0b\x5b\xe3\xe1\xba" +
		"\xa3\x9b\x6b\xc4\x1e\xed\x59\x97\x55\x53\x7c\x70\x77\xfd\xe1\xa2\xa3\x9b\xdd\xb6\xde\xdd\xd8\xab\x7a\x7f\x7b\x69" +
		"\xeb\xee\x16\x77\x75\xdf\xdf\x1c\xec\xde\x1d\x6e\x2f\xf7\xdd\x99\xcd\x41\x33\xd3\x1d\xc5\xb3\xec\xef\xbf\x3a\xc6" +
		"\x6c\xfe\xcc\x0c\x42\xc8\x76\x04\xb1\x23\xcd\x64\x56\xaf\x30\x36\x93\x8e\xc9\xb5\x30\x90\x1a\x80\x3e\x85\x90\x9e" +
		"\x99\x9c\x67\xb2\xda\x82\x72\x2e\xfa\x4c\x74\x6c\x41\xfd\x5c\xec\xcd\x1f\x49\x21\x92\x25\x11\xe4\x23\x88\x8f\xf6" +
		"\xa4\x88\x4b\xf1\x8d\xae\xba\x60\x3c\x82\x8f\x4b\x56\x01\x4d\x27\x39\xd6\x7e\x0d\x3c\xe8\x1b\x01\x14\xc9\x33\x39" +
		"\xf0\xc5\x11\x1f\x87\x40\x50\x68\x71\x4d\x29\x5f\x2c\x69\x61\x57\xec\xc7\x75\x68\x26\xc9\x41\x81\x62\x9e\x89\x51" +
		"\x13\x1b\x00\x4e\xcf\x27\xc5\x01\xe4\x44\x74\xe2\x16\xaa\xe0\x9b\x32\x65\x65\x0a\xf8\xc3\x48\xd0\x7b\x0a\x4e\x20" +
		"\xf5\x80\x11\x28\xaa\xd7\xe3\x5b\x79\x5d\xf4\x5d\x59\xfa\x94\xb4\x16\x2b\xf0\xd5\x7a\x5d\x18\x5f\x22\xa8\xca\xbe" +
		"\xcb\xe5\x0b\x39\x54\xac\x5f\x28\x29\x67\x03\x18\xc2\x4a\x18\x6c\x60\x7d\x86\x5e\x20\xc5\x70\x04\xdf\xc3\xe7\x92" +
		"\xfa\x19\xbc\x94\x41\x90\x19\x8f\x6b\xdb\xe6\x05\xde\xfb\xa0\xc4\xf2\xa5\x75\x79\x81\xeb\x1f\x61\xfa\x97\x69\x09" +
		"\x68\xe9\xeb\x15\x00\xf2\x20\x2d\xfc\x5d\xbd\xfd\xf4\xe9\x97\xe6\xe7\x77\x3f\x55\xef\xa1\xaa\xfe\xf9\x0e\xeb\x50" +
		"\x69\x41\x96\xef\xa1\xd5\xc5\x76\x7b\xbd\xdd\x6d\x2f\x76\x57\xdb\x7d\x65\xfe\x0f\x00\x00\xff\xff\x28\x31\x1f\xc1" +
		"\x2c\x04\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        1068,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1595085626, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
