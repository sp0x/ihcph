// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592557559, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcd\x4e\xdb\x40\x10\xc7\xef\xfb\x14\x23\xa7\x42\xd0\xe2\xc4\x09" +
		"\x26\x1f\x96\x50\x0f\x5c\x8a\x54\xa9\x07\xe0\x54\xaa\x6a\xbc\x3b\x8e\x57\x5e\xef\x5a\xb3\xb3\xa4\xbc\x7d\xe5\x18" +
		"\x52\x24\xa4\xfa\xe4\x99\x9d\xdf\x7f\x3e\xf3\x3c\x57\x1e\x7b\xaa\xc0\xb6\x7a\x68\xe7\x5d\x37\x37\x9d\x8a\x56\xde" +
		"\x3c\xca\x50\xd4\x6c\x07\xb1\xc1\x57\x90\xdd\x79\x21\xf6\x38\x5a\xe8\xe0\x5b\x48\x91\xe0\x36\x0c\xe4\x5b\xdc\x93" +
		"\xcf\x94\xbc\x0c\x54\xc1\xc0\xf6\x19\x85\x94\x43\xbf\x4f\xb8\xa7\x0a\xc8\xe7\x8f\xf7\x8a\x51\xc8\xd9\xde\x4a\x05" +
		"\xcb\x42\xa9\x48\x22\xd6\xef\x63\xa5\x00\x72\x70\x58\x93\xab\xe0\x36\x84\xce\x92\x02\x00\x98\x0a\xd3\xff\x1c\x93" +
		"\xba\xd0\x1f\x51\x6a\xf6\xdd\xfa\x2e\x82\xb4\x28\xa0\xd1\x43\x4d\x90\x22\x99\x4b\xb0\x1e\x34\x46\x82\x03\x41\x8b" +
		"\xcf\x04\xbd\x65\x0e\x1c\xe7\xca\x8d\xc0\x98\x6b\xf6\x18\x09\xa4\x25\x38\xb4\xc1\x11\x24\x76\x50\x93\xc6\xb1\x17" +
		"\xa6\x48\xfc\x7c\xec\x6f\xde\x70\xf0\x62\x28\x76\x31\x59\xa1\xb9\x0e\x3d\x30\x49\x62\x1f\xa1\x2c\xca\x63\xcd\xad" +
		"\xc8\x10\xab\xc5\xe2\xff\xd8\xa2\xeb\xde\x47\x2c\x22\x39\xd2\xf2\x60\x7b\xfa\x3a\xe0\x9e\xee\xcc\x8d\x59\x5f\x9b" +
		"\x12\xaf\x4c\x4e\xb4\xc3\xbc\xc4\xad\xce\xb7\xb8\xd2\x39\x6e\xd7\x35\x6d\xd6\x88\x0d\xea\xb3\x3a\x89\x04\x7f\x67" +
		"\x6e\x9a\xed\xaa\xa6\xcd\xb2\xc8\x97\x1b\x7d\x9d\x97\xbb\x2b\x9d\xd7\x3b\x5c\xe6\x4d\xb3\xd9\xea\xd2\x6c\x77\x57" +
		"\x65\x7d\xa6\x93\x93\xc4\x74\x43\xfe\x2c\xd9\xdb\x93\xa1\xd4\xec\x47\x62\x88\x84\xac\x5b\x88\xba\xa5\x9e\xd4\x64" +
		"\x8d\xa3\xe9\x49\xda\x60\x2a\xd8\x93\x28\x80\x26\x38\x17\x0e\x4c\xc6\x32\x69\xa9\x40\x38\x8d\x8b\x98\xdd\x4f\x34" +
		"\x53\x4c\x4e\x80\x7c\xea\x89\x51\x02\x2b\x00\x0e\x87\xe3\x8c\x01\xa6\x2e\x03\x57\x90\x39\x3b\x17\xdb\x53\xa6\x46" +
		"\xf8\xa1\x25\x68\x2c\x39\x13\x21\x34\x80\x1e\xc8\x8b\x95\x97\xf3\xf8\x5e\xf4\x62\xcc\x7e\x0c\x9a\xc4\x46\xfc\xf5" +
		"\xf7\xbd\x32\xbe\x7a\x50\x84\x6d\x9d\xc6\xab\x35\x28\x98\x8f\xe1\x6f\x4f\xce\x9d\x0a\x1f\xbf\xc6\x3a\x21\x3e\x69" +
		"\x8d\x5b\x9c\xee\x8c\xe9\x37\xd3\xe0\x50\xd3\xe9\x09\x00\x79\x1f\x2b\xf8\x99\x9d\x3f\x3d\x7d\x99\x7f\xbe\xf8\x94" +
		"\x5d\x42\x96\xfd\xfa\xc0\x1a\x14\x1a\x90\xe3\x47\x34\x5b\x15\xc5\xba\x58\x16\xab\xe5\x75\x51\x66\xea\x6f\x00\x00" +
		"\x00\xff\xff\x1a\xd4\x28\x6b\x70\x03\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        880,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592557541, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
