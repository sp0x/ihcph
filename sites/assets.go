// Code generated by bindata. DO NOT EDIT.
// sources:
// sites/assets.go
// sites/ihcph.yml

package sites

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataSitesAssetsgo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func gzipBindataSitesAssetsgo() (*gzipAsset, error) {
	bytes := _gzipBindataSitesAssetsgo
	info := gzipBindataFileInfo{
		name:        "sites/assets.go",
		size:        0,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592992015, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataSitesIhcphyml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x1e\xb4\x85\x93\xb4\x91\xbc\x6b" +
		"\xaf\xed\xb5\x00\xa3\x07\x5f\x6a\xa0\x68\x0f\x49\x4e\x4d\xd1\xcc\x92\xa3\x15\x21\x8a\x14\x38\x23\x6f\xf7\xef\x0b" +
		"\xae\x9c\xd4\x40\x80\xe8\x34\x43\xcd\x7b\xf3\xe6\x0d\x59\xd7\xb5\x89\x34\x72\x0b\xdf\xdb\xa9\x6f\x86\xa1\x71\x83" +
		"\x11\xaf\x5f\x4f\x8c\x63\xb1\xd9\x4f\xea\x53\x6c\x51\x3d\x45\xe5\x1c\xa9\x64\x14\xf0\x5b\x9a\x85\xf1\x98\x26\x8e" +
		"\x3d\x1d\x38\x56\x46\x4f\x13\xb7\x98\xb2\x7f\x26\x65\x13\x28\x1e\x66\x3a\x70\x0b\x8e\xf5\xa7\x0f\x26\x93\x72\xf0" +
		"\xa3\xd7\x16\x9b\xb5\x31\xc2\xaa\x3e\x1e\xa4\x35\x40\x8d\x40\x7b\x0e\x2d\x1e\x53\x1a\x3c\x1b\x00\x58\x84\xd9\xff" +
		"\x0f\x16\x76\xe5\x7f\xd5\x98\xd5\xef\x3e\x0e\x02\xed\x49\x61\x29\x62\xcf\x98\x85\xdd\x7b\xf8\x08\x4b\xc2\x38\x32" +
		"\x7a\x7a\x66\x8c\x3e\xe7\x94\xa5\x31\xa1\x00\x4a\xaf\xd5\x27\x61\x68\xcf\x38\xf6\x29\x30\xe6\x1c\xb0\x67\x4b\x65" +
		"\x96\xcc\xc2\xf9\xf9\x3c\x5f\xd3\xe5\x14\xd5\xb1\x0c\x32\x7b\xe5\xc6\xa6\x11\x99\x75\xce\x51\xb0\x5d\x6f\xcf\x9a" +
		"\x7b\xd5\x49\xda\xcb\xcb\x1f\xc3\x2e\x87\xe1\x75\xc5\xa5\x70\x60\xab\x1f\xfd\xc8\xbf\x4e\x74\xe0\x27\xf7\xe0\x6e" +
		"\x6f\xdc\x96\xae\x5d\xcd\x7c\x4f\xf5\x96\x76\xb6\xde\xd1\x95\xad\x69\x77\xbb\xe7\xbb\x5b\xa2\x8e\xec\xc5\x7e\x56" +
		"\x4d\xf1\xc9\x3d\x74\xbb\xab\x3d\xdf\x6d\xd6\xf5\xe6\xce\xde\xd4\xdb\xfb\x6b\x5b\xef\xef\x69\x53\x77\xdd\xdd\xce" +
		"\x6e\xdd\xee\xfe\x7a\xbb\xbf\xb0\x73\xd0\x39\xf3\x03\xc7\x8b\xd9\x3f\x7e\x4b\x8c\x59\xfd\x39\x67\x08\x53\xb6\x3d" +
		"\xc4\xf6\x3c\xb2\x59\xb2\x62\xcd\xc8\xda\x27\xd7\xe2\xc0\x6a\x80\x2e\x85\x90\x8e\x99\x9d\xcf\x6c\xb5\x85\xe6\xb9" +
		"\x2c\x62\xe0\x53\x0b\xf5\x63\x89\x57\x7f\x24\x45\x64\xcb\x22\x94\x4f\x10\x1f\xed\xd9\x7a\x97\xe2\x1b\x5d\x16\x40" +
		"\xf1\x04\x1f\xa7\x59\x05\x9a\xce\xbe\x2f\xfd\x1a\x3c\xe9\x1b\x01\x89\xcc\x23\x3b\xf8\x92\x88\x8f\x87\xc0\x28\xb6" +
		"\xb8\xa6\xd0\x97\x48\x5a\x6c\x4a\xfc\x61\x11\x9d\x59\xe6\xa0\xe0\x38\x8f\x9c\x49\x53\x36\x40\x4e\xc7\xf3\x6a\x81" +
		"\xc5\xdc\x94\x5b\x54\xc1\x37\x45\x65\x65\x0a\xf8\x63\xcf\xe8\x3c\x07\x27\x48\x1d\x28\x82\xa3\x7a\x3d\xbd\x95\xd7" +
		"\xa4\xef\xca\xd0\xe7\xa2\x85\xac\xc0\x97\xe8\x35\x31\xbd\x9c\x90\x6a\xf6\xfb\xb9\xbc\x15\x47\x4a\xf5\x8b\x25\xe5" +
		"\x5b\x81\x42\x58\x0c\xc3\x0a\xcb\x7d\xf3\x82\x14\xc3\x09\xbe\xc3\x97\x52\xfa\x05\x5e\x8a\x10\xca\x99\x4e\x4b\xdb" +
		"\xe6\x05\xde\xf9\xa0\x9c\xe5\x6b\xeb\x72\xd5\x96\xc7\x90\xf9\x9f\xcc\x53\x20\xcb\xdf\x7e\x01\x94\x0f\xd2\xe2\xaf" +
		"\xea\xed\xe7\xcf\xbf\x34\x3f\xbf\xfb\xa9\x7a\x8f\xaa\xfa\xfb\x3b\xac\x23\xe5\x89\xb2\x7c\x0f\xad\xae\xd6\xeb\xdb" +
		"\xf5\x66\x7d\xb5\xb9\x59\x6f\x2b\xf3\x5f\x00\x00\x00\xff\xff\x5a\xe2\xce\x2b\x15\x04\x00\x00")

func gzipBindataSitesIhcphyml() (*gzipAsset, error) {
	bytes := _gzipBindataSitesIhcphyml
	info := gzipBindataFileInfo{
		name:        "sites/ihcph.yml",
		size:        1045,
		md5checksum: "",
		mode:        os.FileMode(511),
		modTime:     time.Unix(1592991988, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"sites/assets.go": gzipBindataSitesAssetsgo,
	"sites/ihcph.yml": gzipBindataSitesIhcphyml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"sites": {Func: nil, Children: map[string]*gzipBintree{
		"assets.go": {Func: gzipBindataSitesAssetsgo, Children: map[string]*gzipBintree{}},
		"ihcph.yml": {Func: gzipBindataSitesIhcphyml, Children: map[string]*gzipBintree{}},
	}},
}}
